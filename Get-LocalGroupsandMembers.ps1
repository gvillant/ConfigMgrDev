########################################################### #Script Title: Get Local Groups and Members PowerShell Tool #Script File Name: Get-LocalGroupsandMembers.ps1 #Author: Ron Ratzlaff (aka "The_Ratzenator") #Date Created: 8/26/2014 ###########################################################  #Requires -Version 3.0Function Get-LocalGroupsandMembers{	<#	  .SYNOPSIS	  	  	Retrieves a list of groups as well as a specified group's members from local and remote computers 			  .DESCRIPTION	  	  	The "Get Local Groups and Members PowerShell Tool" is able to display a list of groups on either the local or remote computer along with a specified group's members. This tool requires PowerShell version 3.0. This tool has only one mandatory parameter which is the $GroupList parameter. If you just want to find the members of the "Administrators" group on the local computer, then you do not have to make any specification for the -ComputerName or the -GroupName parameters since the local computer and the "Administrators" group has been set as the default values. If you want to get a list of members of the "Administrators" group from a remote computer, then you specify the remote computer name using the -ComputerName parameter, but again, you do not have to specify the "Administrators" group using the -GroupName parameter since that is the default value. This script will also attempt to detect if the Administrators group has been renamed, and if so, it will target that group instead. This tool uses the "System.DirectoryServices.AccountManagement" .Net namespace that was released with .Net Framework 3.5. Since Windows PowerShell 3.0 requires the full installation of Microsoft .NET Framework 4, this will not be a problem, just ensure that the "#Requires -Version 3.0" statement remains at the top of the script to be used as the primary detection method, assuming that the full .Net Framework 4 version is installed.	  	  .EXAMPLE		To get a list of the local groups and the members of the Administrators group on the local computer:		Get-LocalGroupsandMembers -GroupList "Yes" 	  .EXAMPLE				To NOT get a list of the local groups, but to get the members of the Administrators group on the local computer:		Get-LocalGroupsandMembers -GroupList "No"	  .EXAMPLE		To get a list of the local groups and get the members of another group besides the default Administrators group on the local computer:		Get-LocalGroupsandMembers -GroupList "Yes" -GroupName "Group1"		  .EXAMPLE				To NOT get a list of the local groups, but to get the members of another group besides the default Administrators group on the local computer:		Get-LocalGroupsandMembers -GroupList "No" -GroupName "Group1"	  .EXAMPLE		To get a list of the local groups and the members of the Administrators group on a remote computer:		Get-LocalGroupsandMembers -ComputerName "Computer1" -GroupList "Yes" 	  .EXAMPLE				To NOT get a list of the local groups, but to get the members of the Administrators group on the remote computer:		Get-LocalGroupsandMembers -ComputerName "Computer1" -GroupList "No"	  .EXAMPLE		To get a list of the local groups and get the members of another group besides the default Administrators group on a remote computer:		Get-LocalGroupsandMembers -ComputerName "Computer1" -GroupList "Yes" -GroupName "Group1"		  .EXAMPLE				To NOT get a list of the local groups, but to get the members of another group besides the default Administrators group on a remote computer:		Get-LocalGroupsandMembers -ComputerName "Computer1" -GroupList "No" -GroupName "Group1"	  	  .EXAMPLE				To get a list of the local groups and get the members of the Administrators group on multiple computers:		Get-LocalGroupsandMembers -ComputerName @("Compute1", "Computer2", "Computer3") -GroupList "Yes" 			  .EXAMPLE				To get a list of the local groups and get the members of another group besides the default Administrators group on multiple computers:		Get-LocalGroupsandMembers -ComputerName @("Compute1", "Computer2", "Computer3") -GroupList "Yes" -GroupName "Group1"				or 				Get-LocalGroupsandMembers -ComputerName (Get-Content -Path "$env:TEMP\ComputerList.txt") -GroupList "Yes" -GroupName "Group1"			  .EXAMPLE				To get a list of the local groups and get the members of multiple groups on the local computer:		Get-LocalGroupsandMembers -GroupList "Yes" -GroupName @("Group1", "Group2", "Group3")				or				Get-LocalGroupsandMembers -GroupList "Yes" -GroupName (Get-Content -Path "$env:TEMP\GroupList.txt")			  .EXAMPLE				To get a list of the local groups and get the members of multiple groups on multiple computers:		Get-LocalGroupsandMembers -ComputerName @("Compute1", "Computer2", "Computer3") -GroupList "Yes" -GroupName @("Group1", "Group2", "Group3")				or				Get-LocalGroupsandMembers -ComputerName (Get-Content -Path "$env:TEMP\ComputerList.txt") -GroupList "Yes" -GroupName (Get-Content -Path "$env:TEMP\GroupList.txt")	  .EXAMPLE				To get a list of the local groups and get the members of multiple groups on multiple computers and output the info to a .log (or .txt file) while displaying the results on screen:		Get-LocalGroupsandMembers -ComputerName @("Compute1", "Computer2", "Computer3") -GroupList "Yes" -GroupName @("Group1", "Group2", "Group3") | Tee-Object -Filepath "$env:TEMP\ListofGroupsandMembers.log"				or				Get-LocalGroupsandMembers -ComputerName (Get-Content -Path "$env:TEMP\ComputerList.txt") -GroupList "Yes" -GroupName (Get-Content -Path "$env:TEMP\GroupList.txt") | Tee-Object -Filepath "$env:TEMP\ListofGroupsandMembers.txt"      .EXAMPLE				To get a list of the local groups and get the members of multiple groups on multiple computers and output the info to a .log (or .txt file) while NOT displaying the results on screen:		Get-LocalGroupsandMembers -ComputerName @("Compute1", "Computer2", "Computer3") -GroupList "Yes" -GroupName @("Group1", "Group2", "Group3") | Out-File -FilePath "$env:TEMP\ListofGroupsandMembers.log"				or				Get-LocalGroupsandMembers -ComputerName (Get-Content -Path "$env:TEMP\ComputerList.txt") -GroupList "Yes" -GroupName (Get-Content -Path "$env:TEMP\GroupList.txt") | Out-File -FilePath "$env:TEMP\ListofGroupsandMembers.txt"	  .PARAMETER ComputerName	  	  	Used to query a single computer or multiple computers.	  	  .PARAMETER GroupList	  	  	A mandatory parameter used to display a list of all the local groups on a local or remote computer. This parameter requires only a Yes or No value. 	  	  .PARAMETER GroupName	  	  	Used to specify the name of a group if the default Administrators group is not desired.  	#>		[cmdletbinding()]		Param     (                      [Parameter(ValueFromPipeline,            ValueFromPipelineByPropertyName,            HelpMessage='What computer name would you like to target?')]            $ComputerName = $env:COMPUTERNAME,                  [Parameter(ValueFromPipeline,            ValueFromPipelineByPropertyName,            HelpMessage='What local group would you like to target to get a list of members from?')]           [ValidateNotNullOrEmpty()]          $GroupName = "Administrators",				[Parameter(Mandatory=$true,             HelpMessage='Do you want to list all the local groups on the computer(s)? Enter Yes or No')]          [ValidateSet('Yes', 'No', 'Y', 'N', IgnoreCase = $true)]         [string[]]$GroupList    )  		Begin {}		Process 	{            		$NewLine = "`r`n"				Foreach ($Computer in $ComputerName)		{			$NewLine						$GetGroupList = (Get-WMIObject -ComputerName $Computer -Class Win32_Group -Filter "LocalAccount=True").Name | Out-String -OutVariable GetGroupList						If (Test-Connection -ComputerName $Computer -Count 1 -Quiet -ErrorAction Stop) 			{				Write-Output "---------- Computer Name ----------"								$NewLine								$Computer								$NewLine								If ($GroupList -match "Yes" -or $GroupList -match "Y")				{										Write-Output "---------- List of Local Groups on $Computer ----------"									$NewLine									$GetGroupList										$NewLine				}							Foreach ($Group in $GroupName)				{					$GetAdminGroupUsingSID = (Get-WMIObject -ComputerName $Computer -Class Win32_Group -Filter "LocalAccount=True and SID='S-1-5-32-544'").Name										Switch ($Group)  			        { 			            { 			                $_ -match "Administrators" 			            } 												{							If ($GetAdminGroupUsingSID -ne "Administrators")							{								Write-Output "---------- Administrators Group Renamed on $Computer ----------"																$NewLine																Write-Warning -Message "The script detected that the Administrators group has been renamed to:"																$NewLine																$GetAdminGroupUsingSID 																$NewLine																$Group = $Group -replace "Administrators", "$GetAdminGroupUsingSID"							}						}					}										$CheckGroupExist = $GetGroupList | Where-Object {$_ -match "$Group"}										If ($CheckGroupExist -eq $null)					{						$NewLine												Write-Warning -Message "The $Group group does not exist on $Computer"												$NewLine					}										Else					{						Write-Output "---------- $Group Group Members on $Computer ----------"											$NewLine												Try						{							Add-Type -AssemblyName System.DirectoryServices.AccountManagement -ErrorAction Stop						}												Catch						{                               $NewLine                                                          Write-Warning "The 'System.DirectoryServices.AccountManagement' namespace did NOT load successfully because $($_.Exception.Message)"                                                          $NewLine 														Write-Output "The script will now exit"														$NewLine														Write-Host "Press any key to continue ..."							$Pause = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")														$NewLine														Exit						}												$GetGroupInfo = @(						$ContextType = [System.DirectoryServices.AccountManagement.ContextType]::Machine						$PrincipalContext = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList $ContextType, $Computer						$IdentityType = [System.DirectoryServices.AccountManagement.IdentityType]::SamAccountName						$GroupPrincipal = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($PrincipalContext, $IdentityType, $Group)						$GroupPrincipal) 						$GetGroupInfo.Members | 												Select-Object @{N='Computer Name\Domain Name'; E={$_.Context.Name}}, @{N='Group Members'; E={$_.samaccountName}}					}				}			}						Else             {                                 Write-Warning -Message "$Computer is offline or does not exist!"                                  $NewLine             } 		}	}		End {}}#EndFunction